Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 5
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 5
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 5
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 5
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 5
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 5
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 5
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 5
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 5
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if
TokenStream at 7
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition

Nodes: empty fn x { empty empty empty if
TokenStream at 7
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression LetBinding

Nodes: empty fn x { empty empty empty if
TokenStream at 7
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if empty
TokenStream at 7
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression

Nodes: empty fn x { empty empty empty if empty
TokenStream at 7
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if empty
TokenStream at 7
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if empty {
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if empty {
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if empty { empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if empty { empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if empty { empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if empty { empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if empty { empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if empty { empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if empty { empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if empty { empty empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if empty { empty empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if empty { empty empty empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if empty { empty empty empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if empty { empty empty empty empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if empty { empty empty empty empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if empty { empty empty empty empty empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if empty { empty empty empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if empty { empty
TokenStream at 8
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`

Nodes: empty fn x { empty empty empty if empty { empty }
TokenStream at 9
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block:

Nodes: empty fn x { empty empty empty if empty NodeRef(0)
TokenStream at 9
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression:

Nodes: empty fn x { empty empty empty if empty NodeRef(0)
TokenStream at 9
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 9
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 9
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty }
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain: ElseIfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
- ElseIfBlock: Block `if` `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0)
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0)
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
- ElseBlock: Block `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0) empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:

Nodes: empty fn x { empty empty empty NodeRef(0)
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty NodeRef(1)
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(0)
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 11
- Module:
- Item:
- Function:
- Block: `}`

Nodes: empty fn x { NodeRef(0) empty }
TokenStream at 13
- Module:
- Item:
- Function:
- Block:

Nodes: empty fn x NodeRef(2)
TokenStream at 13
- Module:
- Item:
- Function:

Nodes: NodeRef(0)
TokenStream at 13
- Module:
- Item:

Nodes: NodeRef(0)
TokenStream at 13
- Module:
- Item: Function

Nodes: NodeRef(0)
TokenStream at 13
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: NodeRef(0) empty
TokenStream at 13
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: NodeRef(0) empty
TokenStream at 13
- Module:
- Item:

Nodes: NodeRef(0) empty
TokenStream at 13
- Module:

Nodes: NodeRef(0)
TokenStream at 13

Took 4.7634ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression LetBinding

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if let
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier

Nodes: empty fn x { empty empty empty if let x
TokenStream at 19
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=`

Nodes: empty fn x { empty empty empty if let x =
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier

Nodes: empty fn x { empty empty empty if let x = y
TokenStream at 22
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 22
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 22
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 22
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty }
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0)
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0)
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain: ElseIfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0)
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
- ElseIfBlock: Block `if` `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0) empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0) NodeRef(0)
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0) NodeRef(0)
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
- ElseBlock: Block `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0) NodeRef(0) empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:

Nodes: empty fn x { empty empty empty NodeRef(0)
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty NodeRef(0)
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(0)
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`

Nodes: empty fn x { NodeRef(0) empty }
TokenStream at 27
- Module:
- Item:
- Function:
- Block:

Nodes: empty fn x NodeRef(1)
TokenStream at 27
- Module:
- Item:
- Function:

Nodes: NodeRef(0)
TokenStream at 27
- Module:
- Item:

Nodes: NodeRef(0)
TokenStream at 27
- Module:
- Item: Function

Nodes: NodeRef(0)
TokenStream at 27
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: NodeRef(0) empty
TokenStream at 27
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: NodeRef(0) empty
TokenStream at 27
- Module:
- Item:

Nodes: NodeRef(0) empty
TokenStream at 27
- Module:

Nodes: NodeRef(0)
TokenStream at 27

Took 2.6166ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression LetBinding

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if let
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier

Nodes: empty fn x { empty empty empty if let x
TokenStream at 19
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=`

Nodes: empty fn x { empty empty empty if let x =
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier

Nodes: empty fn x { empty empty empty if let x = y
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty }
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain: ElseIfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
- ElseIfBlock: Block `if` `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0) empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0) NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0) NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
- ElseBlock: Block `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(0) NodeRef(0) empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:

Nodes: empty fn x { empty empty empty NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`

Nodes: empty fn x { NodeRef(0) empty }
TokenStream at 34
- Module:
- Item:
- Function:
- Block:

Nodes: empty fn x NodeRef(1)
TokenStream at 34
- Module:
- Item:
- Function:

Nodes: NodeRef(0)
TokenStream at 34
- Module:
- Item:

Nodes: NodeRef(0)
TokenStream at 34
- Module:
- Item: Function

Nodes: NodeRef(0)
TokenStream at 34
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: NodeRef(0) empty
TokenStream at 34
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: NodeRef(0) empty
TokenStream at 34
- Module:
- Item:

Nodes: NodeRef(0) empty
TokenStream at 34
- Module:

Nodes: NodeRef(0)
TokenStream at 34

Took 6.3735ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression LetBinding

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if let
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier

Nodes: empty fn x { empty empty empty if let x
TokenStream at 19
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=`

Nodes: empty fn x { empty empty empty if let x =
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier

Nodes: empty fn x { empty empty empty if let x = y
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty {
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty {
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 26
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty }
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0)
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty }
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain: ElseIfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
- ElseIfBlock: Block `if` `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0)
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0)
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
- ElseBlock: Block `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0) empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:

Nodes: empty fn x { empty empty empty NodeRef(0)
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty NodeRef(1)
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(1)
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 34
- Module:
- Item:
- Function:
- Block: `}`

Nodes: empty fn x { NodeRef(1) empty }
TokenStream at 36
- Module:
- Item:
- Function:
- Block:

Nodes: empty fn x NodeRef(2)
TokenStream at 36
- Module:
- Item:
- Function:

Nodes: NodeRef(0)
TokenStream at 36
- Module:
- Item:

Nodes: NodeRef(0)
TokenStream at 36
- Module:
- Item: Function

Nodes: NodeRef(0)
TokenStream at 36
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: NodeRef(0) empty
TokenStream at 36
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: NodeRef(0) empty
TokenStream at 36
- Module:
- Item:

Nodes: NodeRef(0) empty
TokenStream at 36
- Module:

Nodes: NodeRef(0)
TokenStream at 36

Took 3.7285ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression LetBinding

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if let
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier

Nodes: empty fn x { empty empty empty if let x
TokenStream at 19
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=`

Nodes: empty fn x { empty empty empty if let x =
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier

Nodes: empty fn x { empty empty empty if let x = y
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty {
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty {
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 47
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty {
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 60
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty }
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty NodeRef(0)
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty NodeRef(0)
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0)
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty
TokenStream at 66
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty }
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain: ElseIfBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
- ElseIfBlock: Block `if` `else`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0)
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0)
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
- ElseBlock: Block `else`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0) empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty NodeRef(0)
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty NodeRef(1)
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1)
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 68
- Module:
- Item:
- Function:
- Block: `}`
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { NodeRef(1) empty }
TokenStream at 70
- Module:
- Item:
- Function:
- Block:
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x NodeRef(2)
TokenStream at 70
- Module:
- Item:
- Function:
⚠ Statement or `}` expected, found identifier

Nodes: NodeRef(0)
TokenStream at 70
- Module:
- Item:
⚠ Statement or `}` expected, found identifier

Nodes: NodeRef(0)
TokenStream at 70
- Module:
- Item: Function
⚠ Statement or `}` expected, found identifier

Nodes: NodeRef(0)
TokenStream at 70
- Module:
- Item:
- Function: Block identifier `fn` `pub`
⚠ Statement or `}` expected, found identifier

Nodes: NodeRef(0) empty
TokenStream at 70
- Module:
- Item:
- Function: Block identifier `fn`
⚠ Statement or `}` expected, found identifier

Nodes: NodeRef(0) empty
TokenStream at 70
- Module:
- Item:
⚠ Statement or `}` expected, found identifier

Nodes: NodeRef(0) empty
TokenStream at 70
- Module:
⚠ Statement or `}` expected, found identifier

Nodes: NodeRef(0)
TokenStream at 70
⚠ Statement or `}` expected, found identifier

Took 6.9782ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression LetBinding

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if let
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier

Nodes: empty fn x { empty empty empty if let x
TokenStream at 19
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=`

Nodes: empty fn x { empty empty empty if let x =
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier

Nodes: empty fn x { empty empty empty if let x = y
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block

Nodes: empty fn x { empty empty empty if NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if NodeRef(0) {
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty {
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty {
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty { empty }
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty NodeRef(0)
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { empty empty NodeRef(0)
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0)
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty empty empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`

Nodes: empty fn x { empty empty empty if NodeRef(0) { NodeRef(0) empty }
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain: ElseIfBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1)
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
- ElseIfBlock: Block `if` `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0)
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0)
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
- ElseBlock: Block `else`

Nodes: empty fn x { empty empty empty if NodeRef(0) NodeRef(1) NodeRef(0) empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:

Nodes: empty fn x { empty empty empty NodeRef(0)
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty NodeRef(1)
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(1)
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 52
- Module:
- Item:
- Function:
- Block: `}`

Nodes: empty fn x { NodeRef(1) empty }
TokenStream at 54
- Module:
- Item:
- Function:
- Block:

Nodes: empty fn x NodeRef(2)
TokenStream at 54
- Module:
- Item:
- Function:

Nodes: NodeRef(0)
TokenStream at 54
- Module:
- Item:

Nodes: NodeRef(0)
TokenStream at 54
- Module:
- Item: Function

Nodes: NodeRef(0)
TokenStream at 54
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: NodeRef(0) empty
TokenStream at 54
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: NodeRef(0) empty
TokenStream at 54
- Module:
- Item:

Nodes: NodeRef(0) empty
TokenStream at 54
- Module:

Nodes: NodeRef(0)
TokenStream at 54

Took 3.5009ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression LetBinding

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if let
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier

Nodes: empty fn x { empty empty empty if let x
TokenStream at 19
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=`

Nodes: empty fn x { empty empty empty if let x =
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier

Nodes: empty fn x { empty empty empty if let x = error
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement `{`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error {
TokenStream at 31
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error {
TokenStream at 31
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty
TokenStream at 31
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty
TokenStream at 31
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty
TokenStream at 31
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty
TokenStream at 31
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty
TokenStream at 31
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty {
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty {
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty empty empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty empty empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty
TokenStream at 42
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty { empty }
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty NodeRef(0)
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { empty empty NodeRef(0)
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0)
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression LetBinding
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement: Expression
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
- Expression:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty empty empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
- Statement:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty
TokenStream at 48
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error { NodeRef(0) empty }
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error NodeRef(1)
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error NodeRef(1)
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain: ElseIfBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error NodeRef(1)
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
- ElseIfBlock: Block `if` `else`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error NodeRef(1) empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error NodeRef(1) NodeRef(0)
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error NodeRef(1) NodeRef(0)
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
- ElseBlock: Block `else`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty if error NodeRef(1) NodeRef(0) empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty empty error
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty empty error
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ identifier expected, found `{`

Nodes: empty fn x { empty
TokenStream at 50
- Module:
- Item:
- Function:
- Block: `}`
⚠ identifier expected, found `{`

Nodes: empty fn x { empty }
TokenStream at 52
- Module:
- Item:
- Function:
- Block:
⚠ identifier expected, found `{`

Nodes: empty fn x NodeRef(2)
TokenStream at 52
- Module:
- Item:
- Function:
⚠ identifier expected, found `{`

Nodes: NodeRef(0)
TokenStream at 52
- Module:
- Item:
⚠ identifier expected, found `{`

Nodes: NodeRef(0)
TokenStream at 52
- Module:
- Item: Function
⚠ identifier expected, found `{`

Nodes: NodeRef(0)
TokenStream at 52
- Module:
- Item:
- Function: Block identifier `fn` `pub`
⚠ identifier expected, found `{`

Nodes: NodeRef(0) empty
TokenStream at 52
- Module:
- Item:
- Function: Block identifier `fn`
⚠ identifier expected, found `{`

Nodes: NodeRef(0) empty
TokenStream at 52
- Module:
- Item:
⚠ identifier expected, found `{`

Nodes: NodeRef(0) empty
TokenStream at 52
- Module:
⚠ identifier expected, found `{`

Nodes: NodeRef(0)
TokenStream at 52
⚠ identifier expected, found `{`

Took 5.6397ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression LetBinding

Nodes: empty fn x { empty empty empty if
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty if empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition: Expression

Nodes: empty fn x { empty empty empty if empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty if empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty if empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty if empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty if empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty if empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty if empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty if empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty if empty empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty if empty empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty if empty empty empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:
- Expression:

Nodes: empty fn x { empty empty empty if empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
- Condition:

Nodes: empty fn x { empty empty empty if error
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block
⚠ Condition expected

Nodes: empty fn x { empty empty empty if error
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
- Block: `}` Statement `{`
⚠ Condition expected

Nodes: empty fn x { empty empty empty if error empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty if error empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain: ElseIfBlock
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty if error empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
- ElseIfBlock: Block `if` `else`
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty if error empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
- ElseIfChain:
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty if error empty NodeRef(0)
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty if error empty NodeRef(0)
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
- ElseBlock: Block `else`
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty if error empty NodeRef(0) empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock:
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty error
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty error
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x {
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty empty empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x { empty empty empty
TokenStream at 13
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ Condition expected
⚠ `{` expected

Nodes: empty fn x {
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty empty empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x { empty empty empty
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier

Nodes: empty fn x {
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty
TokenStream at 17
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty {
TokenStream at 27
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty {
TokenStream at 27
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty
TokenStream at 27
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty
TokenStream at 27
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty
TokenStream at 27
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty
TokenStream at 27
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty
TokenStream at 27
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty {
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty {
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty { empty }
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty NodeRef(0)
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { empty empty NodeRef(0)
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0)
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression LetBinding
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement: Expression
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
- Expression:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty empty empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
- Statement:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty
TokenStream at 44
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty { NodeRef(0) empty }
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty NodeRef(1)
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { empty empty NodeRef(1)
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1)
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 46
- Module:
- Item:
- Function:
- Block: `}`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x { NodeRef(1) empty }
TokenStream at 48
- Module:
- Item:
- Function:
- Block:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: empty fn x NodeRef(2)
TokenStream at 48
- Module:
- Item:
- Function:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: NodeRef(0)
TokenStream at 48
- Module:
- Item:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: NodeRef(0)
TokenStream at 48
- Module:
- Item: Function
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: NodeRef(0)
TokenStream at 48
- Module:
- Item:
- Function: Block identifier `fn` `pub`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: NodeRef(0) empty
TokenStream at 48
- Module:
- Item:
- Function: Block identifier `fn`
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: NodeRef(0) empty
TokenStream at 48
- Module:
- Item:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: NodeRef(0) empty
TokenStream at 48
- Module:
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Nodes: NodeRef(0)
TokenStream at 48
⚠ Condition expected
⚠ `{` expected
⚠ Statement or `}` expected, found identifier
⚠ Statement or `}` expected, found `=`

Took 9.4269ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty empty empty empty loop
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block

Nodes: empty fn x { empty empty empty empty empty empty loop
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty empty empty empty loop {
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}` Statement

Nodes: empty fn x { empty empty empty empty empty empty loop {
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty empty empty empty loop { empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty empty empty empty loop { empty
TokenStream at 21
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty }
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block:

Nodes: empty fn x { empty empty empty empty empty empty loop NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:

Nodes: empty fn x { empty empty empty empty empty empty NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(0)
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 23
- Module:
- Item:
- Function:
- Block: `}`

Nodes: empty fn x { NodeRef(0) empty }
TokenStream at 25
- Module:
- Item:
- Function:
- Block:

Nodes: empty fn x NodeRef(1)
TokenStream at 25
- Module:
- Item:
- Function:

Nodes: NodeRef(0)
TokenStream at 25
- Module:
- Item:

Nodes: NodeRef(0)
TokenStream at 25
- Module:
- Item: Function

Nodes: NodeRef(0)
TokenStream at 25
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: NodeRef(0) empty
TokenStream at 25
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: NodeRef(0) empty
TokenStream at 25
- Module:
- Item:

Nodes: NodeRef(0) empty
TokenStream at 25
- Module:

Nodes: NodeRef(0)
TokenStream at 25

Took 2.9363ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty empty empty empty loop
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block

Nodes: empty fn x { empty empty empty empty empty empty loop
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty empty empty empty loop {
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}` Statement

Nodes: empty fn x { empty empty empty empty empty empty loop {
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty empty empty empty loop { empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for
TokenStream at 29
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error
TokenStream at 29
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error
TokenStream at 29
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}` Statement `{`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error {
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}` Statement
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error {
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement: Expression LetBinding
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement: Expression
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty empty empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression:
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty empty empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty
TokenStream at 30
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error { empty }
TokenStream at 36
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block:
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for error NodeRef(0)
TokenStream at 36
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty error
TokenStream at 36
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression:
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty error
TokenStream at 36
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty
TokenStream at 36
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty }
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block:
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty loop NodeRef(1)
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty empty empty empty empty NodeRef(0)
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ `in` expected, found `{`

Nodes: empty fn x { empty empty NodeRef(0)
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0)
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty empty empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty
TokenStream at 38
- Module:
- Item:
- Function:
- Block: `}`
⚠ `in` expected, found `{`

Nodes: empty fn x { NodeRef(0) empty }
TokenStream at 40
- Module:
- Item:
- Function:
- Block:
⚠ `in` expected, found `{`

Nodes: empty fn x NodeRef(2)
TokenStream at 40
- Module:
- Item:
- Function:
⚠ `in` expected, found `{`

Nodes: NodeRef(0)
TokenStream at 40
- Module:
- Item:
⚠ `in` expected, found `{`

Nodes: NodeRef(0)
TokenStream at 40
- Module:
- Item: Function
⚠ `in` expected, found `{`

Nodes: NodeRef(0)
TokenStream at 40
- Module:
- Item:
- Function: Block identifier `fn` `pub`
⚠ `in` expected, found `{`

Nodes: NodeRef(0) empty
TokenStream at 40
- Module:
- Item:
- Function: Block identifier `fn`
⚠ `in` expected, found `{`

Nodes: NodeRef(0) empty
TokenStream at 40
- Module:
- Item:
⚠ `in` expected, found `{`

Nodes: NodeRef(0) empty
TokenStream at 40
- Module:
⚠ `in` expected, found `{`

Nodes: NodeRef(0)
TokenStream at 40
⚠ `in` expected, found `{`

Took 5.2837ms
Nodes:
TokenStream at 0
- Module: Item

Nodes:
TokenStream at 0
- Module:
- Item: Function

Nodes:
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: empty
TokenStream at 0
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: empty fn
TokenStream at 3
- Module:
- Item:
- Function: Block identifier

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function: Block

Nodes: empty fn x
TokenStream at 4
- Module:
- Item:
- Function:
- Block: `}` Statement `{`

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}` Statement

Nodes: empty fn x {
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty empty empty empty
TokenStream at 10
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty empty empty empty loop
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block

Nodes: empty fn x { empty empty empty empty empty empty loop
TokenStream at 15
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty empty empty empty loop {
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}` Statement

Nodes: empty fn x { empty empty empty empty empty empty loop {
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty empty empty empty loop { empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty
TokenStream at 25
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for
TokenStream at 29
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in
TokenStream at 32
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in {
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}` Statement

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in {
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty empty empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty empty empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty
TokenStream at 33
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block: `}`

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in { empty }
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:
- Block:

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty for in NodeRef(0)
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock:

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty empty empty empty NodeRef(0)
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty empty empty empty loop { empty empty NodeRef(0)
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0)
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty empty empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty empty empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`
- Statement:

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty
TokenStream at 39
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block: `}`

Nodes: empty fn x { empty empty empty empty empty empty loop { NodeRef(0) empty }
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:
- Block:

Nodes: empty fn x { empty empty empty empty empty empty loop NodeRef(1)
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock:

Nodes: empty fn x { empty empty empty empty empty empty NodeRef(0)
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { empty empty NodeRef(1)
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(1)
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding `;`

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression LetBinding

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression
- LetBinding: identifier `=` identifier `let`

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement: Expression

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock Block

Nodes: empty fn x { NodeRef(1) empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock
- Block: `}` Statement `{`

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock IfBlock

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock
- IfBlock: ElseBlock ElseIfChain Block Condition `if`

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock WhileBlock

Nodes: empty fn x { NodeRef(1) empty empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock
- WhileBlock: Block Condition `while`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock ForBlock

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock
- ForBlock: Block `in` `for`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression: LoopBlock

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:
- LoopBlock: Block `loop`

Nodes: empty fn x { NodeRef(1) empty empty empty empty empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:
- Expression:

Nodes: empty fn x { NodeRef(1) empty empty empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`
- Statement:

Nodes: empty fn x { NodeRef(1) empty
TokenStream at 41
- Module:
- Item:
- Function:
- Block: `}`

Nodes: empty fn x { NodeRef(1) empty }
TokenStream at 43
- Module:
- Item:
- Function:
- Block:

Nodes: empty fn x NodeRef(2)
TokenStream at 43
- Module:
- Item:
- Function:

Nodes: NodeRef(0)
TokenStream at 43
- Module:
- Item:

Nodes: NodeRef(0)
TokenStream at 43
- Module:
- Item: Function

Nodes: NodeRef(0)
TokenStream at 43
- Module:
- Item:
- Function: Block identifier `fn` `pub`

Nodes: NodeRef(0) empty
TokenStream at 43
- Module:
- Item:
- Function: Block identifier `fn`

Nodes: NodeRef(0) empty
TokenStream at 43
- Module:
- Item:

Nodes: NodeRef(0) empty
TokenStream at 43
- Module:

Nodes: NodeRef(0)
TokenStream at 43

Took 5.3769ms
